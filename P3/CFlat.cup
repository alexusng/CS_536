/**********************************************************************
 Java CUP specification for a parser for C Flat programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */

non terminal ProgramNode         program;
non terminal LinkedList      	 declList;  //LinkedList 
non terminal DeclNode         	 decl;
non terminal LinkedList		 varDeclList;
non terminal VarDeclNode      	 varDecl;
non terminal FnDeclNode		 fnDecl;
non terminal StructDeclNode	 structDecl;
non terminal LinkedList		 structBody;
non terminal FormalsListNode	 formals;
non terminal LinkedList		 formalsList;
non terminal FormalDeclNode   	 formalDecl;
non terminal FnBodyNode      	 fnBody;
non terminal LinkedList		 stmtList;
non terminal StmtNode  		 stmt;
non terminal AssignNode		 assignExp;
non terminal ExpNode		 exp;
non terminal ExpNode	      	 term;
non terminal CallExpNode    	 fncall;
non terminal LinkedList		 actualList;
non terminal TypeNode  		 type;
non terminal ExpNode   		 loc; // 
non terminal IdNode           	 id; // IdNode
 
 
/* NOTE: Add precedence and associativity declarations here */

precedence right ASSIGN;

precedence left OR;
precedence left AND;
precedence left DOT;

precedence nonassoc LESS, LESSEQ, GREATER, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT; // highest precedence is at the bottom


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: 
		  RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {:
		  dl.addLast(d);
		  RESULT = dl;
                :}
                | /* epsilon */
                {:
		  RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {:
		  RESULT = v;
                :}
		| fnDecl:f
		{:
		  RESULT = f;
		:}
		| structDecl:sd
		{:
  		  RESULT = sd;
		:}	 
                ;

varDeclList     ::= varDeclList:vl varDecl:v
		{:
		  vl.addLast(v);
		  RESULT = vl;
		:}
		| 
 		{:
		  RESULT = new LinkedList<DeclNode>();		  
		:}
		;

varDecl         ::= type:t id:i SEMICOLON
                {:
		  RESULT = new VarDeclNode(t, i, -1);
                :}
		| STRUCT id:i1 id:i2 SEMICOLON
		{:
		  RESULT = new VarDeclNode(new StructNode(i1), i2, 1); // not -1 indicates it is a struct node
		:}
                ;

fnDecl		::= type:t id:i formals:f fnBody:fb
		{:
		  RESULT = new FnDeclNode(t, i, f, fb);
		:}
		;

structDecl      ::= STRUCT id:i LCURLY structBody:sb RCURLY SEMICOLON
		{:
		  RESULT = new StructDeclNode(i, new DeclListNode(sb));
		:}
                ;
                
structBody      ::= structBody:sb varDecl:v
		{:
		  sb.add(v);
		  RESULT = sb;
		:}
                | varDecl:v
		{:
		  LinkedList<DeclNode> l = new LinkedList<DeclNode>();
		  l.addLast(v);
		  RESULT = l;
		:} 
                ;
                
formals         ::= LPAREN RPAREN
		{:
		  RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
		:} 
                | LPAREN formalsList:fl RPAREN
		{:
		  RESULT = new FormalsListNode(fl);
		:} 
                ;

formalsList     ::= formalDecl:fdl
		{:
		  LinkedList<FormalDeclNode> l = new LinkedList<FormalDeclNode>();
		  l.addFirst(fdl);
		  RESULT = l;
		:} 
                | formalDecl:fd COMMA formalsList:fl
		{:
		  fl.addFirst(fd);
		  RESULT = fl;
		:} 
                ;

formalDecl      ::= type:t id:i        // note: no struct parameters
		{:
		  RESULT = new FormalDeclNode(t, i);
		:} 
                ;

fnBody          ::= LCURLY varDeclList:vdl stmtList:sl RCURLY
		{:
		  RESULT = new FnBodyNode(new DeclListNode(vdl), new StmtListNode(sl));
		:} 
                ;

stmtList        ::= stmtList:sl stmt:s
		{:
		  sl.addLast(s);
		  RESULT = sl;
		:} 
                | /* epsilon */
		{:
		  LinkedList<StmtNode> sl = new LinkedList<StmtNode>();
  		  RESULT = sl;
		:} 
                ;

stmt            ::= assignExp:ae SEMICOLON
		{:
		  RESULT = new AssignStmtNode(ae);
		:} 
                | loc:l PLUSPLUS SEMICOLON
		{:
		  RESULT = new PostIncStmtNode(l);
		:} 
                | loc:l MINUSMINUS SEMICOLON
		{:
		  RESULT = new PostDecStmtNode(l);
		:} 
                | CIN READ loc:l SEMICOLON
		{:
		  RESULT = new ReadStmtNode(l);
		:} 
                | COUT WRITE exp:e SEMICOLON
		{:
		  RESULT = new WriteStmtNode(e);
		:} 
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vl stmtList:sl RCURLY
		{:
		  RESULT = new IfStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
		:} 
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:dl1 stmtList:sl1 RCURLY ELSE LCURLY varDeclList:dl2 stmtList:sl2 RCURLY
		{:
		  
		  RESULT = new IfElseStmtNode(e, 
		  	   new DeclListNode(dl1), 
		  	   new StmtListNode(sl1), 
			   new DeclListNode(dl2), 
			   new StmtListNode(sl2));
		:} 
                | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:dl stmtList:sl RCURLY
		{:
		  RESULT = new WhileStmtNode(e, new DeclListNode(dl), new StmtListNode(sl));
		:} 
                | RETURN exp:e SEMICOLON
		{:
		  RESULT = new ReturnStmtNode(e);
		:} 
                | RETURN SEMICOLON
		{:
		  RESULT = new ReturnStmtNode(null);
		:} 
                | fncall:fc SEMICOLON
		{:
		  RESULT = new CallStmtNode(fc);
		:} 
                ;

assignExp       ::= loc:l ASSIGN exp:e
		{:
		  RESULT = new AssignNode(l, e);
		:} 
                ;
                
exp             ::= assignExp:as
		{:
		  RESULT = as;
		:} 
                | exp:e1 PLUS exp:e2
		{:
		  RESULT = new PlusNode(e1, e2);
		:} 
                | exp:e1 MINUS exp:e2
		{:
		  RESULT = new MinusNode(e1, e2);
		:} 
                | exp:e1 TIMES exp:e2
		{:
		  RESULT = new TimesNode(e1, e2);
		:} 
                | exp:e1 DIVIDE exp:e2
		{:
		  RESULT = new DivideNode(e1, e2);
		:} 
                | NOT exp:e
		{:
		  RESULT = new NotNode(e);
		:} 
                | exp:e1 AND exp:e2
		{:
		  RESULT = new AndNode(e1, e2);
		:} 
                | exp:e1 OR exp:e2
		{:
		  RESULT = new OrNode(e1, e2);
		:} 
                | exp:e1 EQUALS exp:e2
		{:
		  RESULT = new EqualsNode(e1, e2);
		:} 
                | exp:e1 NOTEQUALS exp:e2
		{:
		  RESULT = new NotEqualsNode(e1, e2);
		:} 
                | exp:e1 LESS exp:e2
		{:
		  RESULT = new LessNode(e1, e2);
		:} 
                | exp:e1 GREATER exp:e2
		{:
		  RESULT = new GreaterNode(e1, e2);
		:} 
                | exp:e1 LESSEQ exp:e2
		{:
		  RESULT = new LessEqNode(e1, e2);
		:} 
                | exp:e1 GREATEREQ exp:e2
		{:
		  RESULT = new GreaterEqNode(e1, e2);
		:} 
                | MINUS term:t
		{:
  		  // unary
		  RESULT = new UnaryMinusNode(t);
		:} 
                | term:t
		{:
		  RESULT = t;
		:} 
                ;

term            ::= loc: l
		{:
		  RESULT = l;
		:} 
                | INTLITERAL:i
		{:
		  RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
		:} 
                | STRINGLITERAL:s
		{:
		  RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
		:} 
                | TRUE:t
		{:
		  RESULT = new TrueNode(t.linenum, t.charnum);
		:} 
                | FALSE:f
		{:
		  RESULT = new FalseNode(f.linenum, f.charnum);
		:} 
                | LPAREN exp:e RPAREN
		{:
		  e.hasParen = true;
		  RESULT = e;
		:} 
                | fncall:fc
		{:
		  RESULT = fc;
		:} 
                ;

fncall          ::=  id:i LPAREN RPAREN   // fn call with no args
		{:
		  RESULT = new CallExpNode(i);
		:} 
                | id:i LPAREN actualList:al RPAREN  // with args
		{:
		  RESULT = new CallExpNode(i, new ExpListNode(al));
		:} 
                ;

actualList      ::= exp:e
		{:
		  LinkedList<ExpNode> l = new LinkedList<ExpNode>();
		  l.addLast(e);
		  RESULT = l;
		:} 
                | actualList:al COMMA exp:e
		{:
		  al.addLast(e);
		  RESULT = al;
		:} 
                ;

type            ::= INT:i
                {: 
		  RESULT = new IntNode();
                :}
		| BOOL:bl
		{:
		  RESULT = new BoolNode();
		:}
		| VOID:v
		{:
		  RESULT = new VoidNode();
		:}
                ;

loc		::= id:i
		{:
		  RESULT = i;
		:} 
		| loc:lc DOT id:i
		{:
		  //loc: ExpNode 
		  RESULT = new DotAccessExpNode(lc, i);
		:}		
		;

id              ::= ID:i
                {:
		  RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
